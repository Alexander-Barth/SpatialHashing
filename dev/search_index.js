var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SpatialHashing","category":"page"},{"location":"#SpatialHashing","page":"Home","title":"SpatialHashing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SpatialHashing.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SpatialHashing]","category":"page"},{"location":"#SpatialHashing.each_near-NTuple{5, Any}","page":"Home","title":"SpatialHashing.each_near","text":"SpatialHashing.each_near(fun,x,search_range,spatial_index,visited)\n\nEvaluates fun for every index j in particles which is near x. The search is limited to ±spatial_index grid cells. The vector visited is an vector of booleans of the size particles to keep track which particles have been found so far.\n\nIt is important that the function fun checks that the proposed point with index j is really close.\n\nThe following is a complete example in 2 dimensions:\n\nnparticles = 10000\nparticles = [Tuple(rand(2)) for i = 1:nparticles]\nh = 0.1\nlimits = (1,1)\nindex = SpatialHashing.spatial_hash(particles,h,limits)\nx = (0.2,0.2)\nr2max = 0.1^2\nsearch_range = 1\nvisited = falses(nparticles)\nSpatialHashing.each_near(x,search_range,spatial_index,visited) do j\n   r2 = sum((particles[j] .- x).^2)\n   if r2 < r2max\n      println(\"point with index $j is near (distance is $(sqrt(r2)))\")\n   end\nend\n\n\n\n\n\n","category":"method"},{"location":"#SpatialHashing.spatial_hash!-NTuple{5, Any}","page":"Home","title":"SpatialHashing.spatial_hash!","text":"SpatialHashing.spatial_hash!(particles,h,limits,table,num_particles)\n\nInitialize the data structure for spatial hashing.\n\n\n\n\n\n","category":"method"},{"location":"#SpatialHashing.spatial_hash-Tuple{Any, Any, Any}","page":"Home","title":"SpatialHashing.spatial_hash","text":"index = SpatialHashing.spatial_hash(particles,h,limits)\n\nInitialize the data structure index for spatial hashing using the vector of position particles and resolution h. The i-th coordinate is bounded by 0 and limits[i]. The list particles is a iterable of coordinates such that the position of the j-th particle is given by particles[j].\n\nThe index allows to localize all points near a given reference point in O(log(n)) operations where n is the number of particles.\n\nThe hash function is currently setup for 1 to 6-dimensional spaces.\n\nThe parameter h is used to define a grid of cell. Each particle belongs to one grid cell. For every cell a hash number is computed and the index keeps track of all particles with the same hash.\n\n   <--h-->\n   +------+------+------+------+------+------+  (limits[1],limits[2])\n   | ①    |      |      |      |      |      |\n   |      |      |      |      |      |      |\n   +------+------+------+------+------+------+\n   |      |      |      |      |   ⑤  |      |\n   |      |      |      |      | ③    |      |\n   +------+------+------+------+------+------+\n   |      |      |      |      |      |      |\n   |      |  ②   |      |      |      |      |\n   +------+------+------+------+------+------+\n   |      |      |      |  ④   |      |      |\n   |      |      |      |      |      |      |\n   +------+------+------+------+------+------+\n (0,0)\n\n\n\n\n\n","category":"method"}]
}
