var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SpatialHashing","category":"page"},{"location":"#SpatialHashing","page":"Home","title":"SpatialHashing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SpatialHashing.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SpatialHashing]","category":"page"},{"location":"#SpatialHashing.each_near-NTuple{5, Any}","page":"Home","title":"SpatialHashing.each_near","text":"SpatialHashing.each_near(fun,x,search_range,spatial_index,visited)\n\nEvaluates fun for every index j in points which is near x. The search is limited to ± spatial_index around the grid cell containing x. The vector visited is an vector of booleans of the size points to keep track which points have been found so far.\n\nIt is important that the function fun checks that the proposed point with index j is actually close as different grid cells may have the same hash (hash-collision).\n\nThe following is a complete example in 2 dimensions:\n\nnpoints = 200\npoints = [Tuple(rand(2)) for i = 1:npoints]\nh = 0.1\nmax_table = 50\nspatial_index = SpatialHashing.spatial_hash(points,h,max_table)\nx = (0.2,0.2)\nr2max = 0.1^2\nsearch_range = 1\nvisited = falses(npoints)\nSpatialHashing.each_near(x,search_range,spatial_index,visited) do j\n   r2 = sum((points[j] .- x).^2)\n   if r2 < r2max\n      println(\"point with index \",j,\" is near (distance is \",sqrt(r2),\")\")\n   end\nend\n\n# the same indices as naive search\n\nfilter(i -> sum((points[i] .- x).^2) < r2max,1:length(points))\n\n\n\n\n\n","category":"method"},{"location":"#SpatialHashing.spatial_hash!-NTuple{4, Any}","page":"Home","title":"SpatialHashing.spatial_hash!","text":"SpatialHashing.spatial_hash!(points,h,table,num_points)\n\nInitialize the data structure for spatial hashing in-place. table is a vector of integers with hashes, num_points is a vector of integers with the same length as points.\n\nSee SpatialHashing.spatial_hash for explanations of the other parameters.\n\n\n\n\n\n","category":"method"},{"location":"#SpatialHashing.spatial_hash-Tuple{Any, Any, Any}","page":"Home","title":"SpatialHashing.spatial_hash","text":"spatial_index = SpatialHashing.spatial_hash(points,h,max_table)\n\nInitialize the data structure spatial_index for spatial hashing using the vector of position points and grid with resolution h. max_table is the length of the hash table (while size can be tuned to optimize the performance).\n\nThe index allows to localize all points near a given reference point in O(log(n)) operations where n is the number of points.\n\nThe hash function is currently setup for 1- up to 6-dimensional spaces.\n\nThe parameter h is used to define a grid of cell. Each particle belongs to one grid cell. For every cell a hash number is computed and the index keeps track of all points with the same hash.\n\n   <──h──>\n   ┏━━━━━━┯━━━━━━┯━━━━━━┯━━━━━━┯━━━━━━┯━━━━━━┓\n   ┃      │      │      │      │      │      ┃\n   ┃      │      │      │      │      │      ┃\n   ┠──────┼──────┼──────┼──────┼──────┼──────┨\n   ┃  ①   │      │      │      │      │      ┃\n   ┃      │      │      │      │      │      ┃\n   ┠──────┼──────┼──────┼──────┼──────┼──────┨\n   ┃      │      │      │  ④   │      │      ┃\n   ┃      │      │      │      │      │      ┃\n   ┠──────┼──────┼──────┼──────┼──────┼──────┨\n   ┃      │  ②   │      │      │      │      ┃\n   ┃      │      │      │      │      │      ┃\n   ┠──────┼──────┼──────┼──────┼──────┼──────┨\n   ┃      │      │      │      │    ⑤ │      ┃\n   ┃      │      │      │      │ ③    │      ┃\n   ┗━━━━━━┷━━━━━━┷━━━━━━┷━━━━━━┷━━━━━━┷━━━━━━┛\n (0,0)\n\n\n\n\n\n","category":"method"},{"location":"#SpatialHashing.update!-Tuple{Any, Any}","page":"Home","title":"SpatialHashing.update!","text":"SpatialHashing.update!(spatial_index,points)\n\nUpdate the spatial spatial_index using the new positions of the points. The number of points is assumed to be the same as during initialization with SpatialHashing.spatial_hash.\n\n\n\n\n\n","category":"method"}]
}
